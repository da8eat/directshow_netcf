using System;
using System.Runtime.InteropServices;

using DirectShowNETCF.PInvoke;

namespace DirectShowNETCF.ABC
{
    public class CABC : IDisposable
    {
        private string text_ = null;
        private int width_ = 0;
        private IntPtr pText = IntPtr.Zero;

        public CABC()
        {
        }

        public CABC(string text)
        {
            text_ = text;
            buildPtr();
        }

        public void Dispose()
        {
            if (pText != IntPtr.Zero)
            {
                PInvokes.LocalFree(pText);
                pText = IntPtr.Zero;
            }
        }

        public IntPtr getText()
        {
            return pText;
        }

        public string Text
        {
            get
            {
                return text_;
            }
            set
            {
                if (text_ != value)
                {
                    text_ = value;
                    buildPtr();
                }
            }
        }

        public int Width
        {
            get
            {
                return width_;
            }
        }

        public int Height
        {
            get
            {
                return CLetter.getHeight();
            }
        }

        private void buildPtr()
        {
            if (pText != IntPtr.Zero)
            {
                PInvokes.LocalFree(pText);
            }
            width_ = 0;
            for (int i = 0; i < text_.Length; i++)
            {
                width_ += CLetter.getLetterWidth(text_[i]);
            }

            pText = PInvokes.LocalAlloc(0x40, width_ * Height);
            int globPos = 0;
            for (int i = 0; i < Height; i++)
            {
                for (int j = 0; j < text_.Length; j++)
                {
                    byte[] pB = CLetter.getLetterPtr(text_[j]);
                    if (pB != null)
                    {
                        IntPtr pTmp = (IntPtr)(pText.ToInt32() + globPos);
                        Marshal.Copy(pB, CLetter.getLetterWidth(text_[j]) * i, pTmp, CLetter.getLetterWidth(text_[j]));
                        globPos += CLetter.getLetterWidth(text_[j]);
                    }
                }
            }
        }
    }

    public class CLetter
    {
        private static int height_ = 20; //hardcored height
        public static int getHeight()
        {
            return height_;
        }

        public static int getLetterWidth(char letter)
        {
            switch (letter)
            {
                case 'a':
                    {
                        return a.Length / height_;
                    }
                case 'b':
                    {
                        return b.Length / height_;
                    }
                case 'c':
                    {
                        return c.Length / height_;
                    }
                case 'd':
                    {
                        return d.Length / height_;
                    }
                case 'e':
                    {
                        return e.Length / height_;
                    }
                case 'f':
                    {
                        return f.Length / height_;
                    }
                case 'g':
                    {
                        return g.Length / height_;
                    }
                case 'h':
                    {
                        return h.Length / height_;
                    }
                case 'i':
                    {
                        return i.Length / height_;
                    }
                case 'j':
                    {
                        return j.Length / height_;
                    }
                case 'k':
                    {
                        return k.Length / height_;
                    }
                case 'l':
                    {
                        return l.Length / height_;
                    }
                case 'm':
                    {
                        return m.Length / height_;
                    }
                case 'n':
                    {
                        return n.Length / height_;
                    }
                case 'o':
                    {
                        return o.Length / height_;
                    }
                case 'p':
                    {
                        return p.Length / height_;
                    }
                case 'q':
                    {
                        return q.Length / height_;
                    }
                case 'r':
                    {
                        return r.Length / height_;
                    }
                case 's':
                    {
                        return s.Length / height_;
                    }
                case 't':
                    {
                        return t.Length / height_;
                    }
                case 'u':
                    {
                        return u.Length / height_;
                    }
                case 'v':
                    {
                        return v.Length / height_;
                    }
                case 'w':
                    {
                        return w.Length / height_;
                    }
                case 'x':
                    {
                        return x.Length / height_;
                    }
                case 'y':
                    {
                        return y.Length / height_;
                    }
                case 'z':
                    {
                        return z.Length / height_;
                    }
                case '1':
                    {
                        break;
                    }
                case '2':
                    {
                        break;
                    }
                case '3':
                    {
                        break;
                    }
                case '4':
                    {
                        break;
                    }
                case '5':
                    {
                        break;
                    }
                case '6':
                    {
                        break;
                    }
                case '7':
                    {
                        break;
                    }
                case '8':
                    {
                        break;
                    }
                case '9':
                    {
                        break;
                    }
                case '0':
                    {
                        break;
                    }
                case '.':
                    {
                        return dot.Length / height_;
                    }
                case ',':
                    {
                        break;
                    }
                case '/':
                    {
                        return rslash.Length / height_;
                    }
                case '\\':
                    {
                        break;
                    }
                case '{':
                    {
                        break;
                    }
                case '}':
                    {
                        break;
                    }
                case '[':
                    {
                        break;
                    }
                case ']':
                    {
                        break;
                    }
                case '(':
                    {
                        break;
                    }
                case ')':
                    {
                        break;
                    }
                case '?':
                    {
                        break;
                    }
                case '!':
                    {
                        break;
                    }
                case '&':
                    {
                        break;
                    }
                case '*':
                    {
                        break;
                    }
                case '@':
                    {
                        break;
                    }
                case '#':
                    {
                        break;
                    }
                case '$':
                    {
                        break;
                    }
                case '%':
                    {
                        break;
                    }
                case '+':
                    {
                        break;
                    }
                case '-':
                    {
                        break;
                    }
                case '=':
                    {
                        break;
                    }
                case '^':
                    {
                        break;
                    }
                case '>':
                    {
                        break;
                    }
                case '<':
                    {
                        break;
                    }
                case '\"':
                    {
                        break;
                    }
                case '\'':
                    {
                        break;
                    }
                case ';':
                    {
                        break;
                    }
                case ':':
                    {
                        return colon.Length / height_;
                    }
                case ' ':
                    {
                        return space.Length / height_;
                    }
                default:
                    {
                        return 0;
                    }
            }
            return 0;
        }

        public static byte[] getLetterPtr(char letter)
        {
            switch (letter)
            {
                case 'a':
                    {
                        return a;
                    }
                case 'b':
                    {
                        return b;
                    }
                case 'c':
                    {
                        return c;
                    }
                case 'd':
                    {
                        return d;
                    }
                case 'e':
                    {
                        return e;
                    }
                case 'f':
                    {
                        return f;
                    }
                case 'g':
                    {
                        return g;
                    }
                case 'h':
                    {
                        return h;
                    }
                case 'i':
                    {
                        return i;
                    }
                case 'j':
                    {
                        return j;
                    }
                case 'k':
                    {
                        return k;
                    }
                case 'l':
                    {
                        return l;
                    }
                case 'm':
                    {
                        return m;
                    }
                case 'n':
                    {
                        return n;
                    }
                case 'o':
                    {
                        return o;
                    }
                case 'p':
                    {
                        return p;
                    }
                case 'q':
                    {
                        return q;
                    }
                case 'r':
                    {
                        return r;
                    }
                case 's':
                    {
                        return s;
                    }
                case 't':
                    {
                        return t;
                    }
                case 'u':
                    {
                        return u;
                    }
                case 'v':
                    {
                        return v;
                    }
                case 'w':
                    {
                        return w;
                    }
                case 'x':
                    {
                        return x;
                    }
                case 'y':
                    {
                        return y;
                    }
                case 'z':
                    {
                        return z;
                    }
                case '1':
                    {
                        break;
                    }
                case '2':
                    {
                        break;
                    }
                case '3':
                    {
                        break;
                    }
                case '4':
                    {
                        break;
                    }
                case '5':
                    {
                        break;
                    }
                case '6':
                    {
                        break;
                    }
                case '7':
                    {
                        break;
                    }
                case '8':
                    {
                        break;
                    }
                case '9':
                    {
                        break;
                    }
                case '0':
                    {
                        break;
                    }
                case '.':
                    {
                        return dot;
                    }
                case ',':
                    {
                        break;
                    }
                case '/':
                    {
                        return rslash;
                    }
                case '\\':
                    {
                        break;
                    }
                case '{':
                    {
                        break;
                    }
                case '}':
                    {
                        break;
                    }
                case '[':
                    {
                        break;
                    }
                case ']':
                    {
                        break;
                    }
                case '(':
                    {
                        break;
                    }
                case ')':
                    {
                        break;
                    }
                case '?':
                    {
                        break;
                    }
                case '!':
                    {
                        break;
                    }
                case '&':
                    {
                        break;
                    }
                case '*':
                    {
                        break;
                    }
                case '@':
                    {
                        break;
                    }
                case '#':
                    {
                        break;
                    }
                case '$':
                    {
                        break;
                    }
                case '%':
                    {
                        break;
                    }
                case '+':
                    {
                        break;
                    }
                case '-':
                    {
                        break;
                    }
                case '=':
                    {
                        break;
                    }
                case '^':
                    {
                        break;
                    }
                case '>':
                    {
                        break;
                    }
                case '<':
                    {
                        break;
                    }
                case '\"':
                    {
                        break;
                    }
                case '\'':
                    {
                        break;
                    }
                case ';':
                    {
                        break;
                    }
                case ':':
                    {
                        return colon;
                    }
                case ' ':
                    {
                        return space; ;
                    }
                default:
                    {
                        return null;
                    }
            }
            return null;
        }

        private static byte[] a = 
            {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 1, 1, 1, 1, 1, 1, 0, 0,  
                0, 1, 1, 1, 1, 1, 1, 1, 0, 0,  
                0, 0, 0, 0, 0, 0, 1, 1, 1, 0,  
                0, 0, 0, 0, 0, 0, 1, 1, 1, 0,  
                0, 0, 0, 1, 1, 1, 1, 1, 1, 0,  
                0, 1, 1, 1, 0, 0, 1, 1, 1, 0,  
                0, 1, 1, 0, 0, 0, 1, 1, 1, 0,  
                0, 1, 1, 0, 0, 0, 1, 1, 1, 0,  
                0, 1, 1, 1, 1, 1, 1, 1, 1, 0,  
                0, 0, 1, 1, 1, 0, 0, 1, 1, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0 
            };

        private static byte[] b = 
            {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0,  
                0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,  
                0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0,  
                0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0,  
                0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 
                0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0,  
                0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0,  
                0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0,  
                0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,  
                0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 
            };

        private static byte[] c = 
            {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 1, 1, 1, 1, 1, 0, 0,
                0, 1, 1, 1, 1, 1, 1, 1, 1, 0,
                0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 
                0, 1, 1, 0, 0, 0, 0, 0, 0, 0,
                0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 
                0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 
                0, 1, 1, 0, 0, 0, 0, 1, 1, 0,
                0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 
                0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 
                0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            };

        private static byte[] d = 
            {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0,
                0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0,
                0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 
                0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
                0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 
                0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 
                0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 
                0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 
                0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 
                0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 
                0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
                0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            };

        private static byte[] e =
            {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 1, 1, 1, 1, 1, 0, 0, 0,
                0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
                0, 1, 1, 0, 0, 0, 0, 1, 1, 0,
                0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 
                0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
                0, 1, 1, 0, 0, 0, 0, 0, 0, 0,
                0, 1, 1, 0, 0, 0, 0, 0, 0, 0,
                0, 1, 1, 0, 0, 0, 1, 1, 1, 0,
                0, 0, 1, 1, 1, 1, 1, 1, 0, 0,
                0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            };

        private static byte[] f =
            {
                0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 1, 1, 1, 0, 
                0, 0, 0, 1, 1, 1, 1, 0,
                0, 0, 0, 1, 1, 0, 0, 0,
                0, 0, 0, 1, 1, 0, 0, 0, 
                0, 1, 1, 1, 1, 1, 1, 0,
                0, 1, 1, 1, 1, 1, 1, 0,
                0, 0, 0, 1, 1, 0, 0, 0, 
                0, 0, 0, 1, 1, 0, 0, 0,
                0, 0, 0, 1, 1, 0, 0, 0,
                0, 0, 0, 1, 1, 0, 0, 0,
                0, 0, 0, 1, 1, 0, 0, 0,
                0, 0, 0, 1, 1, 0, 0, 0,
                0, 0, 0, 1, 1, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0 
            };

        private static byte[] g =
            {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0,
                0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
                0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 
                0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0,  
                0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0,
                0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0,  
                0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0,  
                0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0,  
                0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0,  
                0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0,  
                0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0,  
                0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 
                0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0,  
                0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

            };

        private static byte[] h =
            {                
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0,  
                0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
                0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 
                0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0,  
                0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 
                0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0,  
                0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 
                0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 
                0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 
                0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 
            };

        private static byte[] i = 
            {    
                0, 0, 0, 0, 
                0, 1, 1, 0, 
                0, 1, 1, 0, 
                0, 0, 0, 0, 
                0, 0, 0, 0,  
                0, 1, 1, 0, 
                0, 1, 1, 0,
                0, 1, 1, 0, 
                0, 1, 1, 0, 
                0, 1, 1, 0, 
                0, 1, 1, 0,  
                0, 1, 1, 0,  
                0, 1, 1, 0, 
                0, 1, 1, 0,  
                0, 1, 1, 0,
                0, 0, 0, 0, 
                0, 0, 0, 0,
                0, 0, 0, 0,
                0, 0, 0, 0,
                0, 0, 0, 0 
            };

        private static byte[] j = 
            {               
                0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0,
                0, 0, 0, 1, 1, 0,  
                0, 0, 0, 1, 1, 0,  
                0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0,
                0, 0, 0, 1, 1, 0, 
                0, 0, 0, 1, 1, 0,  
                0, 0, 0, 1, 1, 0,
                0, 0, 0, 1, 1, 0,  
                0, 0, 0, 1, 1, 0,
                0, 0, 0, 1, 1, 0, 
                0, 0, 0, 1, 1, 0,
                0, 0, 0, 1, 1, 0, 
                0, 0, 0, 1, 1, 0,
                0, 0, 0, 1, 1, 0, 
                0, 0, 0, 1, 1, 0, 
                0, 1, 1, 1, 1, 0, 
                0, 1, 1, 1, 0, 0
            };

        private static byte[] k = 
            {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  
                0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  
                0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 
                0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  
                0, 1, 1, 0, 0, 0, 1, 1, 1, 0,  
                0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 
                0, 1, 1, 0, 1, 1, 1, 0, 0, 0,  
                0, 1, 1, 1, 1, 1, 0, 0, 0, 0,  
                0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
                0, 1, 1, 1, 0, 1, 1, 0, 0, 0,  
                0, 1, 1, 0, 0, 0, 1, 1, 0, 0,  
                0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 
                0, 1, 1, 0, 0, 0, 0, 1, 1, 0,  
                0, 1, 1, 0, 0, 0, 0, 1, 1, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            };

        private static byte[] l = 
            {
                0, 0, 0, 0, 
                0, 1, 1, 0,
                0, 1, 1, 0, 
                0, 1, 1, 0, 
                0, 1, 1, 0, 
                0, 1, 1, 0,  
                0, 1, 1, 0,
                0, 1, 1, 0,
                0, 1, 1, 0,  
                0, 1, 1, 0, 
                0, 1, 1, 0,
                0, 1, 1, 0,
                0, 1, 1, 0,
                0, 1, 1, 0, 
                0, 1, 1, 0,
                0, 0, 0, 0, 
                0, 0, 0, 0, 
                0, 0, 0, 0,
                0, 0, 0, 0,
                0, 0, 0, 0
            };

        private static byte[] m = 
            {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0,  
                0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,  
                0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0,  
                0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0,  
                0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0,  
                0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0,  
                0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0,  
                0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0,  
                0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0,  
                0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 
            };

        private static byte[] n = 
            {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 1, 1, 0, 1, 1, 1, 1, 0,  
                0, 1, 1, 1, 1, 1, 1, 1, 1,   
                0, 1, 1, 0, 0, 0, 0, 1, 1,  
                0, 1, 1, 0, 0, 0, 0, 1, 1,  
                0, 1, 1, 0, 0, 0, 0, 1, 1,   
                0, 1, 1, 0, 0, 0, 0, 1, 1,  
                0, 1, 1, 0, 0, 0, 0, 1, 1, 
                0, 1, 1, 0, 0, 0, 0, 1, 1,   
                0, 1, 1, 0, 0, 0, 0, 1, 1, 
                0, 1, 1, 0, 0, 0, 0, 1, 1, 
                0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0
            };

        private static byte[] o = 
            {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 
                0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
                0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 
                0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0,
                0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 
                0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0,
                0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0,  
                0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0,  
                0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
                0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            };

        private static byte[] p = 
            {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0,
                0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
                0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 
                0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0,
                0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 
                0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0,
                0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 
                0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 
                0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
                0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0,
                0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            };

        private static byte[] q = 
            {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0,
                0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
                0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0,
                0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 
                0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 
                0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 
                0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 
                0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0,
                0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
                0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 
                0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0,
                0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            };

        private static byte[] r = 
            {               
                0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 
                0, 1, 1, 0, 1, 1, 1, 0,  
                0, 1, 1, 1, 1, 1, 0, 0, 
                0, 1, 1, 1, 0, 0, 0, 0,  
                0, 1, 1, 0, 0, 0, 0, 0,  
                0, 1, 1, 0, 0, 0, 0, 0,  
                0, 1, 1, 0, 0, 0, 0, 0,  
                0, 1, 1, 0, 0, 0, 0, 0,  
                0, 1, 1, 0, 0, 0, 0, 0, 
                0, 1, 1, 0, 0, 0, 0, 0, 
                0, 1, 1, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0 
            };

        private static byte[] s =
            {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 1, 1, 1, 1, 1, 0, 0, 0,  
                0, 1, 1, 0, 0, 0, 1, 1, 0, 0,  
                0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  
                0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 
                0, 1, 1, 1, 1, 1, 1, 0, 0, 0,
                0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 
                0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 
                0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 
                0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
                0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0 
            };

        private static byte[] t =
            {
                0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 1, 1, 0, 0, 0,  
                0, 0, 0, 1, 1, 0, 0, 0, 
                0, 0, 0, 1, 1, 0, 0, 0, 
                0, 1, 1, 1, 1, 1, 1, 0, 
                0, 1, 1, 1, 1, 1, 1, 0,  
                0, 0, 0, 1, 1, 0, 0, 0, 
                0, 0, 0, 1, 1, 0, 0, 0,  
                0, 0, 0, 1, 1, 0, 0, 0,  
                0, 0, 0, 1, 1, 0, 0, 0, 
                0, 0, 0, 1, 1, 0, 0, 0, 
                0, 0, 0, 1, 1, 0, 0, 0, 
                0, 0, 0, 1, 1, 1, 1, 0,  
                0, 0, 0, 0, 1, 1, 1, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0
            };

        private static byte[] u =
            {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0,  
                0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0,  
                0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0,  
                0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0,  
                0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 
                0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0,  
                0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 
                0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 
                0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
                0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            };

        private static byte[] v =
            {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 1, 1, 0, 0, 0, 0, 1, 1, 0,  
                0, 1, 1, 0, 0, 0, 0, 1, 1, 0,
                0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 
                0, 1, 1, 0, 0, 0, 1, 1, 0, 0,  
                0, 0, 1, 1, 0, 0, 1, 1, 0, 0,
                0, 0, 1, 1, 0, 1, 1, 0, 0, 0,
                0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 
                0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
                0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 
                0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            };

        private static byte[] w =
            {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0,
                0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 
                0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 
                0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 
                0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 
                0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 
                0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 
                0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 
                0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 
                0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            };

        private static byte[] x =
            {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 
                0, 1, 1, 1, 0, 0, 1, 1, 0, 0,  
                0, 0, 1, 1, 1, 1, 1, 0, 0, 0,  
                0, 0, 0, 1, 1, 1, 1, 0, 0, 0,  
                0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 
                0, 0, 0, 1, 1, 1, 1, 0, 0, 0,  
                0, 0, 1, 1, 1, 1, 1, 0, 0, 0,  
                0, 1, 1, 1, 0, 0, 1, 1, 0, 0,  
                0, 1, 1, 0, 0, 0, 1, 1, 1, 0,  
                0, 1, 1, 0, 0, 0, 0, 1, 1, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            };

        private static byte[] y =
            {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 1, 1, 0, 0, 0, 0, 1, 1, 0,  
                0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 
                0, 1, 1, 0, 0, 0, 1, 1, 1, 0,
                0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 
                0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 
                0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 
                0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 
                0, 0, 0, 1, 1, 1, 1, 0, 0, 0,  
                0, 0, 0, 1, 1, 1, 0, 0, 0, 0,  
                0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 
                0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 
                0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 
                0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0 
            };

        private static byte[] z =
            {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 1, 1, 1, 1, 1, 1, 1, 0,  
                0, 1, 1, 1, 1, 1, 1, 1, 0,  
                0, 0, 0, 0, 0, 1, 1, 0, 0,  
                0, 0, 0, 0, 1, 1, 1, 0, 0,  
                0, 0, 0, 1, 1, 1, 0, 0, 0,  
                0, 0, 1, 1, 1, 0, 0, 0, 0, 
                0, 1, 1, 1, 0, 0, 0, 0, 0,  
                0, 1, 1, 0, 0, 0, 0, 0, 0, 
                0, 1, 1, 1, 1, 1, 1, 1, 0,  
                0, 1, 1, 1, 1, 1, 1, 1, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 0, 0
            };

        private static byte[] dot = 
            {
                0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 
                0, 1, 1, 1, 0,  
                0, 1, 1, 1, 0,  
                0, 1, 1, 1, 0, 
                0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0
            };

        private static byte[] colon = 
            {
                0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0,  
                0, 1, 1, 1, 0, 
                0, 1, 1, 1, 0,  
                0, 1, 1, 1, 0, 
                0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0,  
                0, 1, 1, 1, 0, 
                0, 1, 1, 1, 0,  
                0, 1, 1, 1, 0,  
                0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 
            };

        private static byte[] rslash =
            {
                0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 1, 1, 0,  
                0, 0, 0, 1, 1, 0, 0, 
                0, 0, 0, 1, 1, 0, 0, 
                0, 0, 0, 1, 1, 0, 0, 
                0, 0, 0, 1, 1, 0, 0, 
                0, 0, 1, 1, 0, 0, 0, 
                0, 0, 1, 1, 0, 0, 0, 
                0, 0, 1, 1, 0, 0, 0, 
                0, 0, 1, 1, 0, 0, 0, 
                0, 0, 1, 1, 0, 0, 0, 
                0, 1, 1, 0, 0, 0, 0, 
                0, 1, 1, 0, 0, 0, 0,
                0, 1, 1, 0, 0, 0, 0, 
                0, 1, 1, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 0, 0 
            };

        private static byte[] space = 
            {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0  
            };

    }
}
